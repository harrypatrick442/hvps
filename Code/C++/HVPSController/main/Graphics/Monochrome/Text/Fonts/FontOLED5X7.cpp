//For now a single class, will decouple later for different font sizes
#include <cstdint>
#include <vector>
#include <unordered_map>
#include "FontOLED5X7.hpp"
const uint8_t DATA[] = {
    0x00, 0x00, 0x00, 0x00, 0x00,   // (space)
    0x00, 0x00, 0x5F, 0x00, 0x00,   // !
    0x00, 0x07, 0x00, 0x07, 0x00,   // "
    0x14, 0x7F, 0x14, 0x7F, 0x14,   // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12,   // $
    0x23, 0x13, 0x08, 0x64, 0x62,   // %
    0x36, 0x49, 0x55, 0x22, 0x50,   // &
    0x00, 0x05, 0x03, 0x00, 0x00,   // '
    0x00, 0x1C, 0x22, 0x41, 0x00,   // (
    0x00, 0x41, 0x22, 0x1C, 0x00,   // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08,   // *
    0x08, 0x08, 0x3E, 0x08, 0x08,   // +
    0x00, 0x50, 0x30, 0x00, 0x00,   // ,
    0x08, 0x08, 0x08, 0x08, 0x08,   // -
    0x00, 0x60, 0x60, 0x00, 0x00,   // .
    0x20, 0x10, 0x08, 0x04, 0x02,   // /
    0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
    0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
    0x42, 0x61, 0x51, 0x49, 0x46,   // 2
    0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
    0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
    0x27, 0x45, 0x45, 0x45, 0x39,   // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
    0x01, 0x71, 0x09, 0x05, 0x03,   // 7
    0x36, 0x49, 0x49, 0x49, 0x36,   // 8
    0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
    0x00, 0x36, 0x36, 0x00, 0x00,   // :
    0x00, 0x56, 0x36, 0x00, 0x00,   // ;
    0x00, 0x08, 0x14, 0x22, 0x41,   // <
    0x14, 0x14, 0x14, 0x14, 0x14,   // =
    0x41, 0x22, 0x14, 0x08, 0x00,   // >
    0x02, 0x01, 0x51, 0x09, 0x06,   // ?
    0x32, 0x49, 0x79, 0x41, 0x3E,   // @
    0x7E, 0x11, 0x11, 0x11, 0x7E,   // A
    0x7F, 0x49, 0x49, 0x49, 0x36,   // B
    0x3E, 0x41, 0x41, 0x41, 0x22,   // C
    0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
    0x7F, 0x49, 0x49, 0x49, 0x41,   // E
    0x7F, 0x09, 0x09, 0x01, 0x01,   // F
    0x3E, 0x41, 0x41, 0x51, 0x32,   // G
    0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
    0x00, 0x41, 0x7F, 0x41, 0x00,   // I
    0x20, 0x40, 0x41, 0x3F, 0x01,   // J
    0x7F, 0x08, 0x14, 0x22, 0x41,   // K
    0x7F, 0x40, 0x40, 0x40, 0x40,   // L
    0x7F, 0x02, 0x04, 0x02, 0x7F,   // M
    0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
    0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
    0x7F, 0x09, 0x09, 0x09, 0x06,   // P
    0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
    0x7F, 0x09, 0x19, 0x29, 0x46,   // R
    0x46, 0x49, 0x49, 0x49, 0x31,   // S
    0x01, 0x01, 0x7F, 0x01, 0x01,   // T
    0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
    0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
    0x7F, 0x20, 0x18, 0x20, 0x7F,   // W
    0x63, 0x14, 0x08, 0x14, 0x63,   // X
    0x03, 0x04, 0x78, 0x04, 0x03,   // Y
    0x61, 0x51, 0x49, 0x45, 0x43,   // Z
    0x7D, 0x12, 0x12, 0x7D, 0x00,   // Ä
    0x3D, 0x42, 0x42, 0x42, 0x3D,   // Ö
    0x3D, 0x40, 0x40, 0x40, 0x3D,   // Ü
    0x00, 0x00, 0x7F, 0x41, 0x41,   // [
    0x02, 0x04, 0x08, 0x10, 0x20,   // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00,   // ]
    0x04, 0x02, 0x01, 0x02, 0x04,   // ^
    0x40, 0x40, 0x40, 0x40, 0x40,   // _
    0x00, 0x01, 0x02, 0x04, 0x00,   // `
    0x20, 0x54, 0x54, 0x54, 0x78,   // a
    0x7F, 0x48, 0x44, 0x44, 0x38,   // b
    0x38, 0x44, 0x44, 0x44, 0x20,   // c
    0x38, 0x44, 0x44, 0x48, 0x7F,   // d
    0x38, 0x54, 0x54, 0x54, 0x18,   // e
    0x08, 0x7E, 0x09, 0x01, 0x02,   // f
    0x08, 0x14, 0x54, 0x54, 0x3C,   // g
    0x7F, 0x08, 0x04, 0x04, 0x78,   // h
    0x00, 0x44, 0x7D, 0x40, 0x00,   // i
    0x20, 0x40, 0x44, 0x3D, 0x00,   // j
    0x00, 0x7F, 0x10, 0x28, 0x44,   // k
    0x00, 0x41, 0x7F, 0x40, 0x00,   // l
    0x7C, 0x04, 0x18, 0x04, 0x78,   // m
    0x7C, 0x08, 0x04, 0x04, 0x78,   // n
    0x38, 0x44, 0x44, 0x44, 0x38,   // o
    0x7C, 0x14, 0x14, 0x14, 0x08,   // p
    0x08, 0x14, 0x14, 0x18, 0x7C,   // q
    0x7C, 0x08, 0x04, 0x04, 0x08,   // r
    0x48, 0x54, 0x54, 0x54, 0x20,   // s
    0x04, 0x3F, 0x44, 0x40, 0x20,   // t
    0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
    0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
    0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
    0x44, 0x28, 0x10, 0x28, 0x44,   // x
    0x0C, 0x50, 0x50, 0x50, 0x3C,   // y
    0x44, 0x64, 0x54, 0x4C, 0x44,   // z
    0x20, 0x55, 0x54, 0x55, 0x78,   // ä
    0x3A, 0x44, 0x44, 0x3A, 0x00,   // ö
    0x3A, 0x40, 0x40, 0x3A, 0x00,   // ü
    0x00, 0x08, 0x36, 0x41, 0x00,   // {
    0x00, 0x00, 0x7F, 0x00, 0x00,   // |
    0x00, 0x41, 0x36, 0x08, 0x00,   // }
    0x14, 0x3E, 0x55, 0x41, 0x22,   // €
    0x08, 0x08, 0x2A, 0x1C, 0x08,   // -> (ALT + 0134) † 
    0x08, 0x1C, 0x2A, 0x08, 0x08,   // <- (ALT + 0135) ‡
    0x00, 0x00, 0x07, 0x05, 0x07    // °
};


















#include "FontOLED5X7.hpp"

const uint8_t FontOLED5X7::DATA[] = {
    0x00, 0x00, 0x00, 0x00, 0x00,   // (space)
    0x00, 0x00, 0x5F, 0x00, 0x00,   // !
    0x00, 0x07, 0x00, 0x07, 0x00,   // "
    0x14, 0x7F, 0x14, 0x7F, 0x14,   // #
    0x24, 0x2A, 0x7F, 0x2A, 0x12,   // $
    0x23, 0x13, 0x08, 0x64, 0x62,   // %
    0x36, 0x49, 0x55, 0x22, 0x50,   // &
    0x00, 0x05, 0x03, 0x00, 0x00,   // '
    0x00, 0x1C, 0x22, 0x41, 0x00,   // (
    0x00, 0x41, 0x22, 0x1C, 0x00,   // )
    0x08, 0x2A, 0x1C, 0x2A, 0x08,   // *
    0x08, 0x08, 0x3E, 0x08, 0x08,   // +
    0x00, 0x50, 0x30, 0x00, 0x00,   // ,
    0x08, 0x08, 0x08, 0x08, 0x08,   // -
    0x00, 0x60, 0x60, 0x00, 0x00,   // .
    0x20, 0x10, 0x08, 0x04, 0x02,   // /
    0x3E, 0x51, 0x49, 0x45, 0x3E,   // 0
    0x00, 0x42, 0x7F, 0x40, 0x00,   // 1
    0x42, 0x61, 0x51, 0x49, 0x46,   // 2
    0x21, 0x41, 0x45, 0x4B, 0x31,   // 3
    0x18, 0x14, 0x12, 0x7F, 0x10,   // 4
    0x27, 0x45, 0x45, 0x45, 0x39,   // 5
    0x3C, 0x4A, 0x49, 0x49, 0x30,   // 6
    0x01, 0x71, 0x09, 0x05, 0x03,   // 7
    0x36, 0x49, 0x49, 0x49, 0x36,   // 8
    0x06, 0x49, 0x49, 0x29, 0x1E,   // 9
    0x00, 0x36, 0x36, 0x00, 0x00,   // :
    0x00, 0x56, 0x36, 0x00, 0x00,   // ;
    0x00, 0x08, 0x14, 0x22, 0x41,   // <
    0x14, 0x14, 0x14, 0x14, 0x14,   // =
    0x41, 0x22, 0x14, 0x08, 0x00,   // >
    0x02, 0x01, 0x51, 0x09, 0x06,   // ?
    0x32, 0x49, 0x79, 0x41, 0x3E,   // @
    0x7E, 0x11, 0x11, 0x11, 0x7E,   // A
    0x7F, 0x49, 0x49, 0x49, 0x36,   // B
    0x3E, 0x41, 0x41, 0x41, 0x22,   // C
    0x7F, 0x41, 0x41, 0x22, 0x1C,   // D
    0x7F, 0x49, 0x49, 0x49, 0x41,   // E
    0x7F, 0x09, 0x09, 0x01, 0x01,   // F
    0x3E, 0x41, 0x41, 0x51, 0x32,   // G
    0x7F, 0x08, 0x08, 0x08, 0x7F,   // H
    0x00, 0x41, 0x7F, 0x41, 0x00,   // I
    0x20, 0x40, 0x41, 0x3F, 0x01,   // J
    0x7F, 0x08, 0x14, 0x22, 0x41,   // K
    0x7F, 0x40, 0x40, 0x40, 0x40,   // L
    0x7F, 0x02, 0x04, 0x02, 0x7F,   // M
    0x7F, 0x04, 0x08, 0x10, 0x7F,   // N
    0x3E, 0x41, 0x41, 0x41, 0x3E,   // O
    0x7F, 0x09, 0x09, 0x09, 0x06,   // P
    0x3E, 0x41, 0x51, 0x21, 0x5E,   // Q
    0x7F, 0x09, 0x19, 0x29, 0x46,   // R
    0x46, 0x49, 0x49, 0x49, 0x31,   // S
    0x01, 0x01, 0x7F, 0x01, 0x01,   // T
    0x3F, 0x40, 0x40, 0x40, 0x3F,   // U
    0x1F, 0x20, 0x40, 0x20, 0x1F,   // V
    0x7F, 0x20, 0x18, 0x20, 0x7F,   // W
    0x63, 0x14, 0x08, 0x14, 0x63,   // X
    0x03, 0x04, 0x78, 0x04, 0x03,   // Y
    0x61, 0x51, 0x49, 0x45, 0x43,   // Z
    0x7D, 0x12, 0x12, 0x7D, 0x00,   // Ä
    0x3D, 0x42, 0x42, 0x42, 0x3D,   // Ö
    0x3D, 0x40, 0x40, 0x40, 0x3D,   // Ü
    0x00, 0x00, 0x7F, 0x41, 0x41,   // [
    0x02, 0x04, 0x08, 0x10, 0x20,   // "\"
    0x41, 0x41, 0x7F, 0x00, 0x00,   // ]
    0x04, 0x02, 0x01, 0x02, 0x04,   // ^
    0x40, 0x40, 0x40, 0x40, 0x40,   // _
    0x00, 0x01, 0x02, 0x04, 0x00,   // `
    0x20, 0x54, 0x54, 0x54, 0x78,   // a
    0x7F, 0x48, 0x44, 0x44, 0x38,   // b
    0x38, 0x44, 0x44, 0x44, 0x20,   // c
    0x38, 0x44, 0x44, 0x48, 0x7F,   // d
    0x38, 0x54, 0x54, 0x54, 0x18,   // e
    0x08, 0x7E, 0x09, 0x01, 0x02,   // f
    0x08, 0x14, 0x54, 0x54, 0x3C,   // g
    0x7F, 0x08, 0x04, 0x04, 0x78,   // h
    0x00, 0x44, 0x7D, 0x40, 0x00,   // i
    0x20, 0x40, 0x44, 0x3D, 0x00,   // j
    0x00, 0x7F, 0x10, 0x28, 0x44,   // k
    0x00, 0x41, 0x7F, 0x40, 0x00,   // l
    0x7C, 0x04, 0x18, 0x04, 0x78,   // m
    0x7C, 0x08, 0x04, 0x04, 0x78,   // n
    0x38, 0x44, 0x44, 0x44, 0x38,   // o
    0x7C, 0x14, 0x14, 0x14, 0x08,   // p
    0x08, 0x14, 0x14, 0x18, 0x7C,   // q
    0x7C, 0x08, 0x04, 0x04, 0x08,   // r
    0x48, 0x54, 0x54, 0x54, 0x20,   // s
    0x04, 0x3F, 0x44, 0x40, 0x20,   // t
    0x3C, 0x40, 0x40, 0x20, 0x7C,   // u
    0x1C, 0x20, 0x40, 0x20, 0x1C,   // v
    0x3C, 0x40, 0x30, 0x40, 0x3C,   // w
    0x44, 0x28, 0x10, 0x28, 0x44,   // x
    0x0C, 0x50, 0x50, 0x50, 0x3C,   // y
    0x44, 0x64, 0x54, 0x4C, 0x44,   // z
    0x20, 0x55, 0x54, 0x55, 0x78,   // ä
    0x3A, 0x44, 0x44, 0x3A, 0x00,   // ö
    0x3A, 0x40, 0x40, 0x3A, 0x00,   // ü
    0x00, 0x08, 0x36, 0x41, 0x00,   // {
    0x00, 0x00, 0x7F, 0x00, 0x00,   // |
    0x00, 0x41, 0x36, 0x08, 0x00,   // }
    0x14, 0x3E, 0x55, 0x41, 0x22,   // €
    0x08, 0x08, 0x2A, 0x1C, 0x08,   // -> (ALT + 0134) † 
    0x08, 0x1C, 0x2A, 0x08, 0x08,   // <- (ALT + 0135) ‡
    0x00, 0x00, 0x07, 0x05, 0x07    // °
};

const int FontOLED5X7::DATA_SIZE = sizeof(DATA) / sizeof(DATA[0]);
const int FontOLED5X7::INDEX_STAR = '*' - ' ';

FontOLED5X7::FontOLED5X7() {}

int FontOLED5X7::getLookupIndex(char c) const {
    return c - ' ';
}

void FontOLED5X7::getCharacterBytes(int characterIndex, std::vector<uint8_t>& buffer) {
    int index = characterIndex * CHARACTER_WIDTH;
    int endIndexExclusive = index + CHARACTER_WIDTH;
    while (index < endIndexExclusive) {
        buffer.push_back(DATA[index]);
        index++;
    }
}

void FontOLED5X7::drawCharacter(int x, int y, char c, int screenWidth, std::vector<uint8_t>& screenBuffer) {
    int lookupIndex = getLookupIndex(c);
    if (lookupIndex < 0 || lookupIndex >= DATA_SIZE / CHARACTER_WIDTH) {
        lookupIndex = INDEX_STAR;
    }

    std::vector<uint8_t> charBytes;
    getCharacterBytes(lookupIndex, charBytes);

    for (int i = 0; i < CHARACTER_WIDTH; ++i) {
        for (int j = 0; j < CHARACTER_HEIGHT; ++j) {
            if (charBytes[i] & (1 << j)) {
                int bufferIndex = (y + j) * screenWidth + (x + i);
                if (bufferIndex < screenBuffer.size()) {
                    screenBuffer[bufferIndex] = 1; // Set pixel on
                }
            }
        }
    }
}

void FontOLED5X7::drawText(int x, int y, const std::string& text, int screenWidth, std::vector<uint8_t>& screenBuffer, bool breakWords) {
    int cursorX = x;
    int cursorY = y;

    std::string word;
    for (char c : text) {
        if (c == '\n') {
            cursorX = x;
            cursorY += CHARACTER_HEIGHT;
        } else if (c == ' ') {
            if (!word.empty()) {
                if (breakWords || cursorX + word.length() * CHARACTER_WIDTH <= screenWidth) {
                    for (char wc : word) {
                        drawCharacter(cursorX, cursorY, wc, screenWidth, screenBuffer);
                        cursorX += CHARACTER_WIDTH;
                    }
                } else {
                    cursorX = x;
                    cursorY += CHARACTER_HEIGHT;
                    for (char wc : word) {
                        drawCharacter(cursorX, cursorY, wc, screenWidth, screenBuffer);
                        cursorX += CHARACTER_WIDTH;
                    }
                }
                word.clear();
            }
            cursorX += CHARACTER_WIDTH;
            if (cursorX + CHARACTER_WIDTH > screenWidth) {
                cursorX = x;
                cursorY += CHARACTER_HEIGHT;
            }
        } else {
            word += c;
        }
    }

    if (!word.empty()) {
        if (breakWords || cursorX + word.length() * CHARACTER_WIDTH <= screenWidth) {
            for (char wc : word) {
                drawCharacter(cursorX, cursorY, wc, screenWidth, screenBuffer);
                cursorX += CHARACTER_WIDTH;
            }
        } else {
            cursorX = x;
            cursorY += CHARACTER_HEIGHT;
            for (char wc : word) {
                drawCharacter(cursorX, cursorY, wc, screenWidth, screenBuffer);
                cursorX += CHARACTER_WIDTH;
            }
        }
    }
}