LM75A lm75a(i2c); // 0x48 is the default I2C address for LM75A
    // Create an instance of the MPU6050 sensor
    MPU6050 mpu6050(i2c); // 0x68 is the default I2C address for MPU6050
    mpu6050.Initialize();
    while (1) {
        //ssd1306.SetPixel(10, 10, true);
        //ssd1306.SetPixel(11, 11, true);
        //ssd1306.SetPixel(20, 20, false);
        //ssd1306.EntireDisplayOn(true);
        
        /*Log::Info(TAG, "Running HVPSController loop");
        //i2c.scanAndLog();

        // Read the temperature from the LM75A sensor
        bool successful;
        float temperature = lm75a.GetTemperature(successful);
        if (successful) {
            Log::Info(TAG, "Temperature: %.2f째C", temperature);
        } else {
            Log::Error(TAG, "Failed to read temperature");
        }

        feedWatchdog();
        // Read the acceleration from the MPU6050 sensor
        float ax, ay, az;
        if (mpu6050.GetAcceleration(ax, ay, az) == ESP_OK) {
            Log::Info(TAG, "Acceleration: ax=%.2f g, ay=%.2f g, az=%.2f g", ax, ay, az);
        } else {
            Log::Error(TAG, "Failed to read acceleration");
        }

        feedWatchdog();
        // Read the gyroscope data from the MPU6050 sensor
        float gx, gy, gz;
        if (mpu6050.GetGyroscope(gx, gy, gz) == ESP_OK) {
            Log::Info(TAG, "Gyroscope: gx=%.2f 째/s, gy=%.2f 째/s, gz=%.2f 째/s", gx, gy, gz);
        } else {
            Log::Error(TAG, "Failed to read gyroscope");
        }
*/